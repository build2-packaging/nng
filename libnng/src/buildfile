# Public headers.
pub = [dir_path] ../include/

include $pub

pub_hdrs = $($pub/ pub_hdrs)

# as in upstream: anything that is not windows is considered
# posix
is_windows = ($c.target.class == 'windows')
is_posix = (!$is_windows)

# tls/ssl backend can be defined by user
use_mbedtls = ($config.libnng.tls_engine == 'mbedtls')
use_wolfssl = ($config.libnng.tls_engine == 'wolfssl')
use_supp_tls = ($config.libnng.supp_tls && ($use_mbedtls || $use_wolfssl))

# packages are missing so TLS is currently not supported
if ($use_mbedtls || $use_wolfssl)
{
    fail 'TLS is currently not supported'
}

lib{nng}: $pub/{$pub_hdrs}
lib{nng}: c{*}
lib{nng}: compat/nanomsg/{h c}{* -*_test}
lib{nng}: core/{h c}{* -*_test}
lib{nng}: platform/windows/{h c}{*}: include = $is_windows
lib{nng}: platform/posix/{h c}{*}: include = $is_posix
lib{nng}: sp/{h c}{transport}

# protocol compilation
lib{nng}: sp/protocol/bus0/c{bus}: include = $config.libnng.proto_bus0
lib{nng}: sp/protocol/pair0/c{pair}: include = $config.libnng.proto_pair0
lib{nng}: sp/protocol/pair1/c{pair pair1_poly}: include = $config.libnng.proto_pair1
lib{nng}: sp/protocol/pipeline0/c{pull}: include = $config.libnng.proto_pull0
lib{nng}: sp/protocol/pipeline0/c{push}: include = $config.libnng.proto_push0
lib{nng}: sp/protocol/pubsub0/c{pub}: include = $config.libnng.proto_pub0
lib{nng}: sp/protocol/pubsub0/c{sub xsub}: include = $config.libnng.proto_sub0
lib{nng}: sp/protocol/reqrep0/c{req xreq}: include = $config.libnng.proto_req0
lib{nng}: sp/protocol/reqrep0/c{rep xrep}: include = $config.libnng.proto_rep0
lib{nng}: sp/protocol/survey0/c{survey xsurvey}: include = $config.libnng.proto_surveyor0
lib{nng}: sp/protocol/survey0/c{respond xrespond}: include = $config.libnng.proto_respondent0

# transport compilation
lib{nng}: sp/transport/inproc/c{inproc}: include = $config.libnng.transport_inproc
lib{nng}: sp/transport/ipc/c{ipc}: include = $config.libnng.transport_ipc
lib{nng}: sp/transport/tcp/c{tcp}: include = $config.libnng.transport_tcp
lib{nng}: sp/transport/tls/c{tls}: include = $config.libnng.transport_tls
lib{nng}: sp/transport/ws/c{websocket}: include = $config.libnng.transport_ws

# supplemental compilation
lib{nng}: supplemental/base64/{h c}{base64}: include = $config.libnng.supp_base64
lib{nng}: supplemental/http/c{http_public} supplemental/http/h{http_api}
lib{nng}: supplemental/http/c{* -http_public}: include = $config.libnng.supp_http
lib{nng}: supplemental/sha1/{h c}{sha1}: include = $config.libnng.supp_sha1
lib{nng}: supplemental/tls/c{tls_common} supplemental/tls/h{tls_api}
lib{nng}: supplemental/util/c{*}
lib{nng}: supplemental/tls/mbedtls/{h c}{*}: include = ($config.libnng.supp_tls && $use_mbedtls)
lib{nng}: supplemental/websocket/{h c}{websocket}: include = $config.libnng.supp_websocket
lib{nng}: supplemental/websocket/c{stub}: include = (!$config.libnng.supp_websocket)

config_flags = \
    $config.libnng.proto_bus0 \
    $config.libnng.proto_pair0 \
    $config.libnng.proto_pair1 \
    $config.libnng.proto_pull0 \
    $config.libnng.proto_push0 \
    $config.libnng.proto_pub0 \
    $config.libnng.proto_sub0 \
    $config.libnng.proto_req0 \
    $config.libnng.proto_rep0 \
    $config.libnng.proto_surveyor0 \
    $config.libnng.proto_respondent0 \
    $config.libnng.transport_inproc \
    $config.libnng.transport_ipc \
    $config.libnng.transport_tcp \
    $config.libnng.transport_tls \
    $config.libnng.transport_ws \
    $config.libnng.supp_http \
    $use_supp_tls \
    ($config.libnng.supp_tls && $use_mbedtls) \
    ($config.libnng.supp_tls && $use_mbedtls) \
    ($config.libnng.supp_tls && $use_wolfssl) \
    ($config.libnng.supp_tls && $use_wolfssl) \
    $config.libnng.elide_deprecated \
    $config.libnng.set_stacksize \
    $config.libnng.enable_stats \
    ($config.libnng.resolve_concurrency != 0) \
    ($config.libnng.num_taskq_threads != 0)


config_poptions = \
    NNG_HAVE_BUS0 \
    NNG_HAVE_PAIR0 \
    NNG_HAVE_PAIR1 \
    NNG_HAVE_PULL0 \
    NNG_HAVE_PUSH0 \
    NNG_HAVE_PUB0 \
    NNG_HAVE_SUB0 \
    NNG_HAVE_REQ0 \
    NNG_HAVE_REP0 \
    NNG_HAVE_SURVEYOR0 \
    NNG_HAVE_RESPONDENT0 \
    NNG_TRANSPORT_INPROC \
    NNG_TRANSPORT_IPC \
    NNG_TRANSPORT_TCP \
    NNG_TRANSPORT_TLS \
    NNG_TRANSPORT_WS \
    NNG_SUPP_HTTP \
    NNG_SUPP_TLS \
    NNG_TLS_ENGINE_INIT=nng_tls_engine_init_mbed \
    NNG_TLS_ENGINE_FINI=nng_tls_engine_fini_mbed \
    NNG_TLS_ENGINE_INIT=nng_tls_engine_init_wolf \
    NNG_TLS_ENGINE_FINI=nng_tls_engine_fini_wolf \
    NNG_ELIDE_DEPRECATED \
    NNG_SETSTACKSIZE \
    NNG_ENABLE_STATS \
    "NNG_RESOLV_CONCURRENCY=$config.libnng.resolve_concurrency" \
    "NNG_NUM_TASKQ_THREADS=$config.libnng.num_taskq_threads"

for i: $integer_sequence(0, $size($config_poptions))
{
    flag = ($config_flags[$i])
    opt = ($config_poptions[$i])
    if $flag
    {
        c.poptions += -D$opt
    }
}

c.poptions += "-DNNG_MAX_TASKQ_THREADS=$config.libnng.max_taskq_threads"

platform_poptions = # Platform specific poptions.
platform_libs = # Platform specific libraries.
switch $c.target.class, $c.target.system
{
    case 'windows'
    {
        if ($c.target.system == 'mingw32')
            platform_libs += -lws2_32 -lmswsock -ladvapi32
        else
            platform_libs += ws2_32.lib mswsock.lib advapi32.lib

        platform_poptions += -D_WIN32_WINNT=0x0600 -D_CRT_SECURE_NO_WARNINGS -D_CRT_RAND_S -DNNG_PLATFORM_WINDOWS
    }
    case 'linux'
    {
        platform_poptions += -DNNG_PLATFORM_POSIX \
            -DNNG_PLATFORM_LINUX \
            -DNNG_USE_EVENTFD \
            -DNNG_HAVE_ABSTRACT_SOCKETS
    }
    case 'bsd', 'freebsd'
    {
        platform_poptions += -DNNG_PLATFORM_POSIX -DNNG_PLATFORM_FREEBSD
    }
    case 'bsd', 'netbsd'
    {
        platform_poptions += -DNNG_PLATFORM_POSIX -DNNG_PLATFORM_NETBSD
    }
    case 'bsd', 'openbsd'
    {
        platform_poptions += -DNNG_PLATFORM_POSIX -DNNG_PLATFORM_OPENBSD
    }
    case 'macos'
    {
        platform_poptions += -DNNG_PLATFORM_POSIX -DNNG_PLATFORM_DARWIN
    }
    default
    {
        # hope for POSIX
        warn "This platform may not be supported: $c.target.class"
        platform_poptions += -DNNG_PLATFORM_POSIX
    }
}

if $is_posix
{
    platform_poptions += -D_GNU_SOURCE -D_REENTRANT -D_THREAD_SAFE -D_POSIX_PTHREAD_SEMANTICS
    platform_libs += -pthread
}

# Build options.
out_pfx_inc = [dir_path] $out_root/include/
src_pfx_inc = [dir_path] $src_root/include/
out_pfx_src = [dir_path] $out_root/src/
src_pfx_src = [dir_path] $src_root/src/

c.poptions += "-I$out_pfx_src" "-I$src_pfx_src" \
              "-I$out_pfx_inc" "-I$src_pfx_inc" \
              "-I$out_pfx_tst" "-I$src_pfx_tst" \
              $platform_poptions
c.libs += $platform_libs

{hbmia obja}{*}: c.poptions += -DNNG_STATIC_LIB
{hbmis objs}{*}: c.poptions += -DNNG_SHARED_LIB

# Export options.
lib{nng}:
{
  c.export.poptions = "-I$out_pfx_inc" "-I$src_pfx_inc"
  c.export.libs = $platform_libs
}

liba{nng}: c.export.poptions += -DNNG_STATIC_LIB

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
if $version.pre_release
{
  lib{nng}: bin.lib.version = "-$version.project_id"
}
else
{
  lib{nng}: bin.lib.version = "-$version.major.$version.minor"
}

# Don't install private headers.
h{*}: install = false
