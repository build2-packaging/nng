# Public headers.
pub = [dir_path] ../include/

include $pub

pub_hdrs = $($pub/ pub_hdrs)

is_windows = ($c.target.class == 'windows')
is_posix = (!$is_windows)

use_mbedtls = ($config.libnng.tls_engine == 'mbedtls')
use_wolfssl = ($config.libnng.tls_engine == 'wolfssl')
use_supp_tls = ($config.libnng.supp_tls && ($use_mbedtls || $use_wolfssl))

if ($use_mbedtls || $use_wolfssl)
{
    fail 'TLS is currently not supported'
}

lib{nng}: $pub/{$pub_hdrs}
lib{nng}: c{*}
lib{nng}: {h c}{compat/** -**_test}
lib{nng}: {h c}{core/** -**_test}
lib{nng}: {h c}{platform/windows/** -**_test}: include = $is_windows
lib{nng}: {h c}{platform/posix/** -**_test}: include = $is_posix
lib{nng}: {h c}{sp/transport}

# protocol compilation
lib{nng}: c{sp/protocol/bus0/bus}: include = $config.libnng.proto_bus0
lib{nng}: c{sp/protocol/pair0/pair}: include = $config.libnng.proto_pair0
lib{nng}: c{sp/protocol/pair1/pair sp/protocol/pair1/pair1_poly}: include = $config.libnng.proto_pair1
lib{nng}: c{sp/protocol/pipeline0/pull}: include = $config.libnng.proto_pull0
lib{nng}: c{sp/protocol/pipeline0/push}: include = $config.libnng.proto_push0
lib{nng}: c{sp/protocol/pubsub0/pub}: include = $config.libnng.proto_pub0
lib{nng}: c{sp/protocol/pubsub0/sub sp/protocol/pubsub0/xsub}: include = $config.libnng.proto_sub0
lib{nng}: c{sp/protocol/reqrep0/req sp/protocol/reqrep0/xreq}: include = $config.libnng.proto_req0
lib{nng}: c{sp/protocol/reqrep0/rep sp/protocol/reqrep0/xrep}: include = $config.libnng.proto_rep0
lib{nng}: c{sp/protocol/survey0/survey sp/protocol/survey0/xsurvey}: include = $config.libnng.proto_surveyor0
lib{nng}: c{sp/protocol/survey0/respond sp/protocol/survey0/xrespond}: include = $config.libnng.proto_respondent0

# transport compilation
lib{nng}: c{sp/transport/inproc/inproc}: include = $config.libnng.transport_inproc
lib{nng}: c{sp/transport/ipc/ipc}: include = $config.libnng.transport_ipc
lib{nng}: c{sp/transport/tcp/tcp}: include = $config.libnng.transport_tcp
lib{nng}: c{sp/transport/tls/tls}: include = $config.libnng.transport_tls
lib{nng}: c{sp/transport/ws/websocket}: include = $config.libnng.transport_ws

# supplemental compilation
lib{nng}: {h c}{supplemental/base64/base64}: include = $config.libnng.supp_base64
lib{nng}: c{supplemental/http/http_public} h{supplemental/http/http_api}
lib{nng}: c{supplemental/http/* -**_test -supplemental/http/http_public}: include = $config.libnng.supp_http
lib{nng}: {h c}{supplemental/sha1/sha1}: include = $config.libnng.supp_sha1
lib{nng}: h{supplemental/tls/tls_api} c{supplemental/tls/tls_common}
lib{nng}: c{supplemental/util/*}
lib{nng}: {h c}{supplemental/tls/mbedtls/*}: include = ($config.libnng.supp_tls && $use_mbedtls)
lib{nng}: {h c}{supplemental/websocket/websocket}: include = $config.libnng.supp_websocket
lib{nng}: c{supplemental/websocket/stub}: include = (!$config.libnng.supp_websocket)



config_flags = $config.libnng.proto_bus0 \
    $config.libnng.proto_pair0 \
    $config.libnng.proto_pair1 \
    $config.libnng.proto_pull0 \
    $config.libnng.proto_push0 \
    $config.libnng.proto_pub0 \
    $config.libnng.proto_sub0 \
    $config.libnng.proto_req0 \
    $config.libnng.proto_rep0 \
    $config.libnng.proto_surveyor0 \
    $config.libnng.proto_respondent0 \
    $config.libnng.transport_inproc \
    $config.libnng.transport_ipc \
    $config.libnng.transport_tcp \
    $config.libnng.transport_tls \
    $config.libnng.transport_ws \
    $config.libnng.supp_http \
    $use_supp_tls \
    ($config.libnng.supp_tls && $use_mbedtls) \
    ($config.libnng.supp_tls && $use_mbedtls) \
    ($config.libnng.supp_tls && $use_wolfssl) \
    ($config.libnng.supp_tls && $use_wolfssl)

config_poptions = NNG_HAVE_BUS0 \
    NNG_HAVE_PAIR0 \
    NNG_HAVE_PAIR1 \
    NNG_HAVE_PULL0 \
    NNG_HAVE_PUSH0 \
    NNG_HAVE_PUB0 \
    NNG_HAVE_SUB0 \
    NNG_HAVE_REQ0 \
    NNG_HAVE_REP0 \
    NNG_HAVE_SURVEYOR0 \
    NNG_HAVE_RESPONDENT0 \
    NNG_TRANSPORT_INPROC \
    NNG_TRANSPORT_IPC \
    NNG_TRANSPORT_TCP \
    NNG_TRANSPORT_TLS \
    NNG_TRANSPORT_WS \
    NNG_SUPP_HTTP \
    NNG_SUPP_TLS \
    NNG_TLS_ENGINE_INIT=nng_tls_engine_init_mbed \
    NNG_TLS_ENGINE_INIT=nng_tls_engine_init_mbed \
    NNG_TLS_ENGINE_INIT=nng_tls_engine_init_wolf \
    NNG_TLS_ENGINE_INIT=nng_tls_engine_init_wolf

for i: $integer_sequence(0, $size($config_poptions))
{
    flag = ($config_flags[$i])
    opt = ($config_poptions[$i])
    if $flag
    {
        c.poptions += -D$opt
    }
}


platform_poptions = # Platform specific poptions.
platform_libs = # Platform specific libraries.
switch $c.target.class
{
    case 'windows'
    {
        platform_libs += ws2_32.lib mswsock.lib advapi32.lib
        platform_poptions += -D_WIN32_WINNT=0x0600 -DNNG_PLATFORM_WINDOWS -D_CRT_SECURE_NO_WARNINGS -D_CRT_RAND_S
    }
    case 'linux'
    {
        platform_poptions += -DNNG_PLATFORM_POSIX -DNNG_PLATFORM_LINUX -DNNG_USE_EVENTFD -DNNG_HAVE_ABSTRACT_SOCKETS
    }
    case 'freebsd'
    {
        platform_poptions += -DNNG_PLATFORM_POSIX -DNNG_PLATFORM_FREEBSD
    }
    case 'netbsd'
    {
        platform_poptions += -DNNG_PLATFORM_POSIX -DNNG_PLATFORM_NETBSD
    }
    case 'openbsd'
    {
        platform_poptions += -DNNG_PLATFORM_POSIX -DNNG_PLATFORM_OPENBSD
    }
    case 'macos'
    {
        platform_poptions += -DNNG_PLATFORM_POSIX -DNNG_PLATFORM_DARWIN
    }
    default
    {
        # hope for POSIX
        warn "This platform may not be supported: $c.target.class"
        platform_poptions +=  -DNNG_PLATFORM_POSIX
    }
}

if $is_posix
{
    platform_poptions += -D_GNU_SOURCE -D_REENTRANT -D_THREAD_SAFE -D_POSIX_PTHREAD_SEMANTICS
    platform_libs += -pthread
}

# Build options.
out_pfx_inc = [dir_path] $out_root/include/
src_pfx_inc = [dir_path] $src_root/include/
out_pfx_src = [dir_path] $out_root/src/
src_pfx_src = [dir_path] $src_root/src/

c.poptions += "-I$out_pfx_src" "-I$src_pfx_src" \
              "-I$out_pfx_inc" "-I$src_pfx_inc" \
              $platform_poptions
c.libs += $platform_libs

if ($config.libnng.elide_deprecated)
{
    c.poptions += -DNNG_ELIDE_DEPRECATED
}

{hbmia obja}{*}: c.poptions += -DNNG_STATIC_LIB
{hbmis objs}{*}: c.poptions += -DNNG_SHARED_LIB

# Export options.
lib{nng}:
{
  c.export.poptions = "-I$out_pfx_inc" "-I$src_pfx_inc"
  c.export.libs = $platform_libs
}

liba{nng}: c.export.poptions += -DNNG_STATIC_LIB

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
if $version.pre_release
{
  lib{nng}: bin.lib.version = "-$version.project_id"
}
else
{
  lib{nng}: bin.lib.version = "-$version.major.$version.minor"
}

# Don't install private headers.
h{*}: install = false
